{"version":3,"sources":["SIRForm.js","ChartView.js","model/sir.js","model/generateur_dates.js","SIRView.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","createStyles","root","flexGrow","grid","actions","float","margin","spacing","textField","color","palette","text","secondary","SIRForm","onChange","classes","enableReinitialize","initialValues","s0","lambda","beta","onSubmit","values","setSubmitting","validationSchema","Yup","shape","typeError","positive","min","max","required","touched","errors","handleChange","handleBlur","Grid","className","container","direction","justify","alignItems","FormControl","formControl","item","TextField","name","label","value","onBlur","InputLabelProps","shrink","helperText","error","Boolean","Button","variant","type","Chart","i0","saints","infectes","retires","time","dummyModel","lineData","labels","jour_0","nombre_de_jours","options_date","weekday","year","month","day","tab_dates","Array","Date","parse","toDateString","i","length","toLocaleDateString","generer_dates","datasets","data","backgroundColor","borderWidth","width","height","options","title","display","fontSize","scales","yAxes","scaleLabel","labelString","xAxes","SIRView","React","useState","setValues","console","log","xs","App","Box","m","Typography","component","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.7a8f9a34.chunk.js","sourcesContent":["import React from 'react';\nimport { createStyles, makeStyles } from '@material-ui/core/styles';\nimport { Grid, TextField, FormControl, Button } from '@material-ui/core';\nimport { Formik, Form } from 'formik';\nimport * as Yup from 'yup';\n\nconst useStyles = makeStyles((theme) =>\n    createStyles({\n        root: {\n            flexGrow: 1,\n        },\n        grid: {\n            // paddingLeft: '2em',\n            // paddingRight: '2em',\n        },\n        actions: {\n            float: 'left',\n            margin: theme.spacing(1),\n        },\n        textField: {\n            // padding: theme.spacing(2),\n            // textAlign: 'center',\n            color: theme.palette.text.secondary,\n        },\n    }),\n);\n\nconst validationSchema = (t) =>\n    Yup.object().shape({\n        s0: Yup.number()\n            .typeError('Veuillez entrer un nombre')\n            .positive('Veuillez entrer un nombre entre 0 et 1.')\n            .min(0, 'Veuillez entrer un nombre entre 0 et 1.')\n            .max(1, 'Veuillez entrer un nombre entre 0 et 1.')\n            .required('Ce champs est obligatoire'),\n        lambda: Yup.number()\n            .typeError('Veuillez entrer un nombre')\n            .positive('Veuillez entrer un nombre entre 0 et 20.')\n            .min(0, 'Veuillez entrer un nombre entre 0 et 20.')\n            .max(20, 'Veuillez entrer un nombre entre 0 et 20.')\n            .required('Ce champs est obligatoire'),\n        beta: Yup.number()\n            .typeError('Veuillez entrer un nombre')\n            .positive('Veuillez entrer un nombre entre 0 et 1.')\n            .min(0, 'Veuillez entrer un nombre entre 0 et 1.')\n            .max(1, 'Veuillez entrer un nombre entre 0 et 1.')\n            .required('Ce champs est obligatoire'),\n    });\n\nexport const SIRForm = ({ onChange }) => {\n    const classes = useStyles();\n\n    const initialValues = {\n        s0: '0.7',\n        lambda: '12',\n        beta: '0.5',\n    };\n\n    const name_s0 = 's0';\n    const name_lambda = 'lambda';\n    const name_beta = 'beta';\n\n    return (\n        <Formik\n            enableReinitialize\n            initialValues={initialValues}\n            onSubmit={(values, { setSubmitting }) => {\n                onChange({ s0: values['s0'], lambda: values['lambda'], beta: values['beta'] });\n            }}\n            validationSchema={validationSchema()}\n        >\n            {({ values, touched, errors, handleChange, handleBlur }) => (\n                <Form>\n                    <Grid\n                        className={classes.grid}\n                        container\n                        direction=\"row\"\n                        justify=\"center\"\n                        alignItems=\"center\"\n                    >\n                        <FormControl className={classes.formControl}>\n                            <Grid item>\n                                <TextField\n                                    className={classes.textField}\n                                    name={name_s0}\n                                    label={'Parametre s0'}\n                                    value={values[name_s0]}\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                    InputLabelProps={{\n                                        shrink: true,\n                                    }}\n                                    helperText={errors[name_s0] && touched[name_s0] && errors[name_s0]}\n                                    error={Boolean(errors[name_s0] && touched[name_s0])}\n                                ></TextField>\n                            </Grid>\n                            <Grid item>\n                                <TextField\n                                    className={classes.textField}\n                                    name={name_lambda}\n                                    label={'Parametre lambda'}\n                                    value={values[name_lambda]}\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                    InputLabelProps={{\n                                        shrink: true,\n                                    }}\n                                    helperText={\n                                        errors[name_lambda] &&\n                                        touched[name_lambda] &&\n                                        errors[name_lambda]\n                                    }\n                                    error={Boolean(errors[name_lambda] && touched[name_lambda])}\n                                ></TextField>\n                            </Grid>\n                            <Grid item>\n                                <TextField\n                                    className={classes.textField}\n                                    name={name_beta}\n                                    label={'Parametre beta'}\n                                    value={values[name_beta]}\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                    InputLabelProps={{\n                                        shrink: true,\n                                    }}\n                                    helperText={\n                                        errors[name_beta] && touched[name_beta] && errors[name_beta]\n                                    }\n                                    error={Boolean(errors[name_beta] && touched[name_beta])}\n                                ></TextField>\n                            </Grid>\n                        </FormControl>\n                        <Grid item>\n                            <Button\n                                className={classes.actions}\n                                variant=\"contained\"\n                                color=\"primary\"\n                                type=\"submit\"\n                            >\n                                Calculer\n                            </Button>\n                        </Grid>\n                    </Grid>\n                </Form>\n            )}\n        </Formik>\n    );\n};\n","import React from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { dummyModel } from './model/sir';\nimport { generer_dates } from './model/generateur_dates'\n\nexport const Chart = ({ s0, lambda, beta }) => {\n    const { saints, infectes, retires } = dummyModel(s0, lambda, beta);\n    const start_date = new Date(2020, 4, 4);\n    const dates_range = generer_dates(start_date, saints.length);\n\n    const lineData = {\n        labels: dates_range,\n        datasets: [\n            {\n                label: ['Population saine'],\n                data: saints,\n                backgroundColor: 'rgba(54, 162, 235, 0.6)',\n                borderWidth: 2,\n            },\n            {\n                label: ['Population infectée'],\n                data: infectes,\n                backgroundColor: 'rgba(255, 206, 86, 0.6)',\n                borderWidth: 2,\n            },\n            {\n                label: ['Population rétablie'],\n                data: retires,\n                backgroundColor: 'rgba(255, 88, 132, 0.6)',\n                borderWidth: 2,\n            },\n        ],\n    };\n\n    return (\n        <div className=\"Chart\">\n            <Line\n                data={lineData}\n                width=\"10\"\n                height=\"10\"\n                options={{\n                    title: {\n                        display: true,\n                        text: 'Modèle SIR simple',\n                        fontSize: 25,\n                    },\n                    scales: {\n                        yAxes: [\n                            {\n                                scaleLabel: {\n                                    display: true,\n                                    labelString: 'Part de la population',\n                                    fontSize: 18,\n                                },\n                            },\n                        ],\n                        xAxes: [\n                            {\n                                scaleLabel: {\n                                    display: true,\n                                    labelString: 'Temps',\n                                    fontSize: 18,\n                                },\n                            },\n                        ],\n                    },\n                }}\n            />\n        </div>\n    );\n};\n","export const simpleSir = (params) => {\n    const { s, i, r } = params;\n\n    const result = s * i * r;\n    return result;\n};\n\nexport const dummyModel = (s0, lambda, beta) => {\n    const maxTime = 30;\n    const i0 = 1 - s0;\n    const r0 = 0;\n\n    var saints = [];\n    var infectes = [];\n    var retires = [];\n\n    saints[0] = s0;\n    infectes[0] = i0;\n    retires[0] = r0;\n\n    for (let time = 1; time < maxTime; time++) {\n        saints[time] = saints[time - 1] * (1 - beta);\n        infectes[time] = infectes[time - 1] * (1 - 1 / lambda) + saints[time - 1] * beta;\n        retires[time] = infectes[time - 1] * (1 / lambda) + retires[time - 1];\n    }\n\n    return { saints, infectes, retires };\n};\n","export function generer_dates(jour_0, nombre_de_jours)\r\n\r\n{\r\n    const options_date = { weekday: 'long', year: 'numeric', month: 'long', day:'numeric'} ;\r\n\r\n    // Dur�e d'une journ�e en ms\r\n    const un_jour = 86400000 ;\r\n    //86400000?;\r\n\r\n    // Sans le jour de la semaine\r\n    // const options_date = {year: 'numeric', month: 'long', day:'numeric'}\r\n\r\n    var tab_dates = new Array(nombre_de_jours)\r\n    tab_dates[0] = Date.parse(jour_0.toDateString()) ;\r\n\r\n    for (var i = 1 ; i < tab_dates.length ; i++){\r\n\r\n        tab_dates[i] = tab_dates[i - 1] + un_jour ;\r\n        tab_dates[i - 1] = new Date(tab_dates[i - 1]).toLocaleDateString('fr-FR', options_date) ;\r\n\r\n    }\r\n\r\n    tab_dates[tab_dates.length - 1] = new Date(tab_dates[tab_dates.length - 1]).toLocaleDateString('fr-FR', options_date);\r\n\r\n    return(tab_dates)\r\n}\r\n\r\n","import React from 'react';\nimport { SIRForm } from './SIRForm';\nimport { Grid } from '@material-ui/core';\nimport { createStyles, makeStyles } from '@material-ui/core/styles';\nimport { Chart } from './ChartView';\n\nconst useStyles = makeStyles((theme) =>\n    createStyles({\n        root: {\n            flexGrow: 1,\n        },\n    }),\n);\nexport const SIRView = () => {\n    const classes = useStyles();\n    const [values, setValues] = React.useState();\n    // eslint-disable-next-line no-console\n    console.log({ values });\n    return (\n        <div className={classes.root}>\n            <Grid container direction=\"column\" justify=\"center\" alignItems=\"stretch\" spacing={3}>\n                <Grid item xs={12}>\n                    <SIRForm onChange={(values) => setValues(values)} />\n                </Grid>\n                {values && <Grid item> {Chart(values)} </Grid>}\n            </Grid>\n        </div>\n    );\n};\n","import React from 'react';\nimport './App.css';\nimport { Typography, Box, Grid } from '@material-ui/core';\nimport { SIRView } from './SIRView';\nimport { dummyModel } from './model/sir';\nimport { Chart } from './ChartView';\n\nconst App = () => {\n    return (\n        <div className=\"App\">\n            <Box m={8}>\n                <Typography variant=\"h3\" component=\"h2\">\n                    Projet MODCOV19 - prototype v1.0\n                </Typography>\n            </Box>\n            <Box m={8}>\n                <Typography variant=\"h5\" component=\"h2\">\n                    Dntrer les paramètres du modèle SIR dans les champs suivants puis cliquer sur\n                    VALISER.\n                </Typography>\n            </Box>\n            <Box m={8}>\n                <SIRView />\n            </Box>\n        </div>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport MyApp from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <MyApp />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}