{"version":3,"sources":["components/FormikTextField.js","components/FormikFormText.js","SIRForm.js","model/sir.js","model/generateur_dates.js","ChartView.js","SIRView.js","utils/localeContext.js","messages.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","createStyles","textField","color","palette","text","secondary","FormikTextField","name","required","select","children","formikProps","tooltipTitle","classes","t","useTranslate","values","touched","errors","handleChange","handleBlur","React","useState","open","setOpen","Tooltip","title","disableFocusListener","disableHoverListener","Boolean","TextField","className","label","value","onChange","onBlur","InputLabelProps","shrink","helperText","error","onMouseEnter","onMouseLeave","onClick","formControl","margin","spacing","minWidth","FormikFormText","FormControl","root","flexGrow","grid","actions","float","SIRForm","enableReinitialize","initialValues","s0","lambda","beta","onSubmit","setSubmitting","validationSchema","Yup","shape","typeError","positive","min","max","props","Grid","container","direction","justify","alignItems","item","Button","variant","type","dummyModel","i0","saints","infectes","retires","time","generer_dates","jour_0","nombre_de_jours","options_date","weekday","year","month","day","tab_dates","Array","Date","parse","toDateString","i","length","toLocaleDateString","Chart","lineData","labels","datasets","data","backgroundColor","borderWidth","width","height","options","display","fontSize","scales","yAxes","scaleLabel","labelString","xAxes","SIRView","setValues","console","log","xs","LocaleContext","createContext","messages","fr","pageNotFound","cancel","save","appBar","about","developpedBy","version","questionsOrRemarks","wip","help","login","logout","shouldBeNumber","positiveNumber","tooSmall","tooLarge","form","compute","tip","App","localeStateHook","locale","a","b","placeholderData","setPlaceholderData","result","placeholderDataPOST","setPlaceholderDataPOST","useEffect","fetch","then","response","json","handleClick","inputFunction","x","y","method","headers","body","JSON","stringify","ok","Provider","en","Box","m","Typography","component","h","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.38ac8476.chunk.js","sourcesContent":["import React from 'react';\nimport { TextField, makeStyles, createStyles, Tooltip } from '@material-ui/core';\nimport { useTranslate } from 'react-polyglot';\n\nconst useStyles = makeStyles((theme) =>\n    createStyles({\n        textField: {\n            // padding: theme.spacing(2),\n            // textAlign: 'center',\n            color: theme.palette.text.secondary,\n        },\n    }),\n);\n\nconst FormikTextField = ({ name, required, select, children, formikProps, tooltipTitle }) => {\n    const classes = useStyles();\n    const t = useTranslate();\n    const { values, touched, errors, handleChange, handleBlur } = formikProps;\n    const [open, setOpen] = React.useState(false);\n\n    return (\n        <Tooltip\n            title={tooltipTitle ? tooltipTitle : t(`form.tip.${name}`)}\n            disableFocusListener={true}\n            disableHoverListener={Boolean(!tooltipTitle) && Boolean(t(`form.tip.${name}`) === '')}\n            open={open}\n        >\n            <TextField\n                required={required}\n                select={select}\n                className={classes.textField}\n                name={name}\n                label={t(`form.${name}`)}\n                value={values[name]}\n                onChange={handleChange}\n                onBlur={handleBlur}\n                InputLabelProps={{\n                    shrink: true,\n                }}\n                helperText={errors[name] && touched[name] && errors[name]}\n                error={Boolean(errors[name] && touched[name])}\n                onMouseEnter={() => setOpen(true)}\n                onMouseLeave={() => setOpen(false)}\n                onClick={() => setOpen(false)}\n            >\n                {children}\n            </TextField>\n        </Tooltip>\n    );\n};\nexport default FormikTextField;\n","import React from 'react';\nimport { makeStyles, createStyles, FormControl } from '@material-ui/core';\nimport FormikTextField from './FormikTextField';\n\nconst useStyles = makeStyles((theme) =>\n    createStyles({\n        formControl: {\n            margin: theme.spacing(1),\n            minWidth: 180,\n        },\n    }),\n);\n\nconst FormikFormText = ({ name, required, formikProps, tooltipTitle }) => {\n    const classes = useStyles();\n\n    return (\n        <FormControl className={classes.formControl}>\n            <FormikTextField\n                required={required}\n                name={name}\n                formikProps={formikProps}\n                tooltipTitle={tooltipTitle}\n            />\n        </FormControl>\n    );\n};\nexport default FormikFormText;\n","import React from 'react';\nimport { createStyles, makeStyles } from '@material-ui/core/styles';\nimport { Grid, FormControl, Button } from '@material-ui/core';\nimport { Formik, Form } from 'formik';\nimport * as Yup from 'yup';\nimport FormikFormText from './components/FormikFormText';\nimport { useTranslate } from 'react-polyglot';\n\nconst useStyles = makeStyles((theme) =>\n    createStyles({\n        root: {\n            flexGrow: 1,\n        },\n        grid: {\n            // paddingLeft: '2em',\n            // paddingRight: '2em',\n        },\n        actions: {\n            float: 'left',\n            margin: theme.spacing(1),\n        },\n        textField: {\n            // padding: theme.spacing(2),\n            // textAlign: 'center',\n            color: theme.palette.text.secondary,\n        },\n    }),\n);\n\nconst validationSchema = (t) =>\n    Yup.object().shape({\n        s0: Yup.number()\n            .typeError('Veuillez entrer un nombre')\n            .positive('Veuillez entrer un nombre entre 0 et 1.')\n            .min(0, 'Veuillez entrer un nombre entre 0 et 1.')\n            .max(1, 'Veuillez entrer un nombre entre 0 et 1.')\n            .required('Ce champs est obligatoire'),\n        lambda: Yup.number()\n            .typeError('Veuillez entrer un nombre')\n            .positive('Veuillez entrer un nombre entre 0 et 20.')\n            .min(0, 'Veuillez entrer un nombre entre 0 et 20.')\n            .max(20, 'Veuillez entrer un nombre entre 0 et 20.')\n            .required('Ce champs est obligatoire'),\n        beta: Yup.number()\n            .typeError('Veuillez entrer un nombre')\n            .positive('Veuillez entrer un nombre entre 0 et 1.')\n            .min(0, 'Veuillez entrer un nombre entre 0 et 1.')\n            .max(1, 'Veuillez entrer un nombre entre 0 et 1.')\n            .required('Ce champs est obligatoire'),\n    });\n\nexport const SIRForm = ({ onChange }) => {\n    const classes = useStyles();\n    const t = useTranslate();\n    const initialValues = {\n        s0: '0.7',\n        lambda: '12',\n        beta: '0.5',\n    };\n\n    return (\n        <Formik\n            enableReinitialize\n            initialValues={initialValues}\n            onSubmit={(values, { setSubmitting }) => {\n                onChange({ s0: values['s0'], lambda: values['lambda'], beta: values['beta'] });\n            }}\n            validationSchema={validationSchema()}\n        >\n            {(props) => (\n                <Form>\n                    <Grid\n                        className={classes.grid}\n                        container\n                        direction=\"row\"\n                        justify=\"center\"\n                        alignItems=\"center\"\n                    >\n                        <FormControl className={classes.formControl}>\n                            <Grid item>\n                                <FormikFormText name=\"s0\" formikProps={props} />\n                            </Grid>\n                            <Grid item>\n                                <FormikFormText name=\"lambda\" formikProps={props} />\n                            </Grid>\n                            <Grid item>\n                                <FormikFormText name=\"beta\" formikProps={props} />\n                            </Grid>\n                        </FormControl>\n                        <Grid item>\n                            <Button\n                                className={classes.actions}\n                                variant=\"contained\"\n                                color=\"primary\"\n                                type=\"submit\"\n                            >\n                                {t('form.compute')}\n                            </Button>\n                        </Grid>\n                    </Grid>\n                </Form>\n            )}\n        </Formik>\n    );\n};\n","export const simpleSir = (params) => {\n    const { s, i, r } = params;\n\n    const result = s * i * r;\n    return result;\n};\n\nexport const dummyModel = (s0, lambda, beta) => {\n    const maxTime = 30;\n    const i0 = 1 - s0;\n    const r0 = 0;\n\n    var saints = [];\n    var infectes = [];\n    var retires = [];\n\n    saints[0] = s0;\n    infectes[0] = i0;\n    retires[0] = r0;\n\n    for (let time = 1; time < maxTime; time++) {\n        saints[time] = saints[time - 1] * (1 - beta);\n        infectes[time] = infectes[time - 1] * (1 - 1 / lambda) + saints[time - 1] * beta;\n        retires[time] = infectes[time - 1] * (1 / lambda) + retires[time - 1];\n    }\n\n    return { saints, infectes, retires };\n};\n","export function generer_dates(jour_0, nombre_de_jours)\r\n\r\n{\r\n    const options_date = { weekday: 'long', year: 'numeric', month: 'long', day:'numeric'} ;\r\n\r\n    // Durée d'une journée en ms\r\n    const un_jour = 86400000 ;\r\n    //86400000?;\r\n\r\n    // Sans le jour de la semaine\r\n    // const options_date = {year: 'numeric', month: 'long', day:'numeric'}\r\n\r\n    var tab_dates = new Array(nombre_de_jours)\r\n    tab_dates[0] = Date.parse(jour_0.toDateString()) ;\r\n\r\n    for (var i = 1 ; i < tab_dates.length ; i++){\r\n\r\n        tab_dates[i] = tab_dates[i - 1] + un_jour ;\r\n        tab_dates[i - 1] = new Date(tab_dates[i - 1]).toLocaleDateString('fr-FR', options_date) ;\r\n\r\n    }\r\n\r\n    tab_dates[tab_dates.length - 1] = new Date(tab_dates[tab_dates.length - 1]).toLocaleDateString('fr-FR', options_date);\r\n\r\n    return(tab_dates)\r\n}\r\n","import React from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { dummyModel } from './model/sir';\nimport { generer_dates } from './model/generateur_dates'\n\nconst jour_0 = new Date(2020, 0, 23);\n\nvar tab_dates = generer_dates(jour_0, dummyModel().saints.length) ;\n\nexport const Chart = ({ s0, lambda, beta }) => {\n    const { saints, infectes, retires } = dummyModel(s0, lambda, beta);\n    const start_date = new Date(2020, 4, 4);\n    const dates_range = generer_dates(start_date, saints.length);\n\n    const lineData = {\n\n        labels: tab_dates,\n        datasets: [\n            {\n                label: ['Population saine'],\n                data: saints,\n                backgroundColor: 'rgba(54, 162, 235, 0.6)',\n                borderWidth: 2,\n            },\n            {\n                label: ['Population infectée'],\n                data: infectes,\n                backgroundColor: 'rgba(255, 206, 86, 0.6)',\n                borderWidth: 2,\n            },\n            {\n                label: ['Population rétablie'],\n                data: retires,\n                backgroundColor: 'rgba(255, 88, 132, 0.6)',\n                borderWidth: 2,\n            },\n        ],\n    };\n\n    return (\n        <div className=\"Chart\">\n            <Line\n                data={lineData}\n                width=\"10\"\n                height=\"10\"\n                options={{\n                    title: {\n                        display: true,\n                        text: 'Modèle SIR simple',\n                        fontSize: 25,\n                    },\n                    scales: {\n                        yAxes: [\n                            {\n                                scaleLabel: {\n                                    display: true,\n                                    labelString: 'Part de la population',\n                                    fontSize: 18,\n                                },\n                            },\n                        ],\n                        xAxes: [\n                            {\n                                scaleLabel: {\n                                    display: true,\n                                    labelString: 'Temps',\n                                    fontSize: 18,\n                                },\n                            },\n                        ],\n                    },\n                }}\n            />\n        </div>\n    );\n};\n","import React from 'react';\nimport { SIRForm } from './SIRForm';\nimport { Grid } from '@material-ui/core';\nimport { createStyles, makeStyles } from '@material-ui/core/styles';\nimport { Chart } from './ChartView';\n\nconst useStyles = makeStyles((theme) =>\n    createStyles({\n        root: {\n            flexGrow: 1,\n        },\n    }),\n);\nexport const SIRView = () => {\n    const classes = useStyles();\n    const [values, setValues] = React.useState();\n    // eslint-disable-next-line no-console\n    console.log({ values });\n    return (\n        <div className={classes.root}>\n            <Grid container direction=\"column\" justify=\"center\" alignItems=\"stretch\" spacing={3}>\n                <Grid item xs={12}>\n                    <SIRForm onChange={(values) => setValues(values)} />\n                </Grid>\n                {values && <Grid item> {Chart(values)} </Grid>}\n            </Grid>\n        </div>\n    );\n};\n","import React from 'react';\n\nconst defaultLocaleContext = ['fr', () => { }];\n\nconst LocaleContext = React.createContext(defaultLocaleContext);\n\nexport const useLocaleContext = () => {\n    const [locale, setLocale] = React.useContext(LocaleContext);\n    return {\n        locale: locale,\n        setLocale: setLocale,\n    };\n};\n\nexport default LocaleContext;\n","const messages = {\n    fr: {\n        pageNotFound: 'Page non trouvée',\n        cancel: 'Annuler',\n        save: 'Enregistrer',\n        appBar: {\n            about: 'A propos de',\n            developpedBy: 'Application développée par',\n            version: 'Version',\n            questionsOrRemarks: 'Questions ou remarques :',\n            wip: 'En cours de développement',\n            help: 'Aide',\n            login: 'Se connecter',\n            logout: 'Se déconnecter',\n        },\n        error: {\n            shouldBeNumber: 'Doit être un nombre',\n            positiveNumber: 'Doit être un nombre positif',\n            tooSmall: 'Cela parait petit',\n            tooLarge: \"N'est pas un peu grand ?\",\n            required: 'Obligatoire',\n        },\n        form: {\n            s0: 'Paramètre s0',\n            lambda: 'Paramètre lambda',\n            beta: 'Paramètre beta',\n            compute: 'Calculer',\n            tip: {\n                s0: 'TODO: Définir ce paramètre',\n                lambda: 'TODO: Définir ce paramètre',\n                beta: 'TODO: Définir ce paramètre',\n            },\n        },\n    },\n};\n\nexport default messages;\n","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport { Typography, Box, Button } from '@material-ui/core';\nimport { SIRView } from './SIRView';\nimport { I18n } from 'react-polyglot';\nimport LocaleContext from './utils/localeContext';\nimport messages from './messages';\nimport { Chart } from './ChartView';\n\nconst App = () => {\n    const initialLocale = 'fr';\n    const localeStateHook = React.useState(initialLocale);\n    const [locale, setLocale] = localeStateHook;\n    const [placeholderData, setPlaceholderData] = useState({ a: 0, b: 0 });\n    const [placeholderDataPOST, setPlaceholderDataPOST] = useState({ result: 0 });\n\n    useEffect(() => {\n        fetch('/get_data_sample').then((response) =>\n            response.json().then((data) => {\n                // eslint-disable-next-line no-console\n                console.log(data);\n                // At this point, data is {\"a\": 2, \"b\": 3}\n                setPlaceholderData(data);\n            }),\n        );\n    }, []);\n\n    const handleClick = async () => {\n        // Example pour envoyer un appel POST a l'API\n        const inputFunction = { x: 2, y: 3 };\n        const response = await fetch('/add_data', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(inputFunction),\n        });\n\n        if (response.ok) {\n            // eslint-disable-next-line no-console\n            console.log('response worked!');\n            response.json().then((data) => {\n                // eslint-disable-next-line no-console\n                console.log(data);\n                // At this point, data is {\"a\": 2, \"b\": 3}\n                setPlaceholderDataPOST(data);\n            });\n        }\n    };\n\n    return (\n        <LocaleContext.Provider value={localeStateHook}>\n            <I18n locale={locale} messages={locale === 'fr' ? messages.fr : messages.en}>\n                <div className=\"App\">\n                    <Box m={8}>\n                        <Typography variant=\"h3\" component=\"h2\">\n                            Projet MODCOV19 - prototype v1.0\n                        </Typography>\n                    </Box>\n                    <Box m={8}>\n                        <Typography variant=\"h4\" component=\"h2\">\n                            Data récupérée de l'API python: (a: {placeholderData.a}, b:{' '}\n                            {placeholderData.b})\n                        </Typography>\n                        <Button color=\"primary\" onClick={handleClick}>\n                            Recupérer données\n                        </Button>\n                        <Typography variant=\"h4\" component=\"h2\">\n                            Reponse de l'API Python à la requête POST envoyée par le bouton: 2 + 3 =\n                            {placeholderDataPOST.result}\n                        </Typography>\n                    </Box>\n                    <Typography variant=\"body1\" component=\"h2\">\n                        Entrer les paramètres du modèle SIR dans les champs suivants puis cliquer\n                        sur CALCULER.\n                    </Typography>\n                    <Box m={8} h={30}>\n                        {Chart({ s0: 0.9, lambda: 6, beta: 0.6 })}\n                        <Typography variant=\"h5\" component=\"h2\">\n                            Entrer les paramètres du modèle SIR dans les champs suivants puis\n                            cliquer sur CALCULER.\n                        </Typography>\n                    </Box>\n                    <Box m={8}>\n                        <SIRView />\n                    </Box>\n                </div>\n            </I18n>\n        </LocaleContext.Provider>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import 'react-app-polyfill/ie11';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport MyApp from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n        <MyApp />\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}