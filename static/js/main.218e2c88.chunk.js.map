{"version":3,"sources":["model/sir.js","SIRForm.js","SIRView.js","ChartView.js","App.js","serviceWorker.js","index.js"],"names":["dummyModel","makeStyles","theme","createStyles","root","flexGrow","grid","actions","float","margin","spacing","textField","color","palette","text","secondary","saints","infectes","retires","time","Chart","initialState","lineData","labels","Array","length","datasets","label","data","React","useState","state","className","width","height","options","title","display","fontSize","App","Box","m","Typography","variant","component","h","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iTAOaA,G,0CCDKC,aAAW,SAACC,GAAD,OACzBC,YAAa,CACTC,KAAM,CACFC,SAAU,GAEdC,KAAM,GAINC,QAAS,CACLC,MAAO,OACPC,OAAQP,EAAMQ,QAAQ,IAE1BC,UAAW,CAGPC,MAAOV,EAAMW,QAAQC,KAAKC,gBDfZ,WACtB,IAOIC,EAAS,GACTC,EAAW,GACXC,EAAU,GAEdF,EAAO,GARI,GASXC,EAAS,GARE,GASXC,EAAQ,GARG,EAUX,IAAK,IAAIC,EAAO,EAAGA,EAfH,GAemBA,IAC/BH,EAAOG,GAAQ,GAAAH,EAAOG,EAAO,GAC7BF,EAASE,GAAQF,EAASE,EAAO,IAAM,EAAI,EAfhC,IADF,GAgBgDH,EAAOG,EAAO,GACvED,EAAQC,GAAQF,EAASE,EAAO,IAAM,EAhB3B,IAgByCD,EAAQC,EAAO,GAGvE,MAAO,CAAEH,SAAQC,WAAUC,a,GEvBbjB,aAAW,SAACC,GAAD,OACzBC,YAAa,CACTC,KAAM,CACFC,SAAU,Q,cCmCPe,EAxCD,WACV,IAAMC,EAAe,CACjBC,SAAU,CACNC,OAAQ,IAAIC,MAAMxB,IAAagB,OAAOS,QACtCC,SAAU,CACN,CACIC,MAAO,CAAC,oBACRC,KAAM5B,IAAagB,QAEvB,CACIW,MAAO,CAAC,0BACRC,KAAM5B,IAAaiB,UAEvB,CACIU,MAAO,CAAC,0BACRC,KAAM5B,IAAakB,YAfnB,EAoBUW,IAAMC,SAAST,GApBzB,mBAoBTU,EApBS,UAsBhB,OACI,yBAAKC,UAAU,SACX,kBAAC,IAAD,CACIJ,KAAMG,EAAMT,SACZW,MAAM,KACNC,OAAO,KACPC,QAAS,CACLC,MAAO,CACHC,SAAS,EACTvB,KAAM,eACNwB,SAAU,SCRnBC,EApBH,WACR,OACI,yBAAKP,UAAU,OACX,kBAACQ,EAAA,EAAD,CAAKC,EAAG,GACJ,kBAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKC,UAAU,MAAnC,gCAIJ,kBAACJ,EAAA,EAAD,CAAKC,EAAG,GACJ,kBAACC,EAAA,EAAD,CAAYC,QAAQ,QAAQC,UAAU,QAI1C,kBAACJ,EAAA,EAAD,CAAKC,EAAG,EAAGI,EAAG,IACV,kBAAC,EAAD,SCVIC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.218e2c88.chunk.js","sourcesContent":["export const simpleSir = (params) => {\n    const { s, i, r } = params;\n\n    const result = s * i * r;\n    return result;\n};\n\nexport const dummyModel = () => {\n    const maxTime = 30;\n    const beta = 0.5;\n    const lambda = 12;\n    const s0 = 0.7;\n    const i0 = 0.3;\n    const r0 = 0;\n\n    var saints = [];\n    var infectes = [];\n    var retires = [];\n\n    saints[0] = s0;\n    infectes[0] = i0;\n    retires[0] = r0;\n\n    for (let time = 1; time < maxTime; time++) {\n        saints[time] = saints[time - 1] * (1 - beta);\n        infectes[time] = infectes[time - 1] * (1 - 1 / lambda) + saints[time - 1] * beta;\n        retires[time] = infectes[time - 1] * (1 / lambda) + retires[time - 1];\n    }\n\n    return { saints, infectes, retires };\n};\n","import React from 'react';\nimport { createStyles, makeStyles } from '@material-ui/core/styles';\nimport { Grid, TextField, FormControl, Button } from '@material-ui/core';\nimport { Formik, Form } from 'formik';\nimport * as Yup from 'yup';\n\nconst useStyles = makeStyles((theme) =>\n    createStyles({\n        root: {\n            flexGrow: 1,\n        },\n        grid: {\n            // paddingLeft: '2em',\n            // paddingRight: '2em',\n        },\n        actions: {\n            float: 'left',\n            margin: theme.spacing(1),\n        },\n        textField: {\n            // padding: theme.spacing(2),\n            // textAlign: 'center',\n            color: theme.palette.text.secondary,\n        },\n    }),\n);\n\nconst validationSchema = (t) =>\n    Yup.object().shape({\n        S: Yup.number()\n            .typeError('error.shouldBeNumber')\n            .positive('error.positiveNumber')\n            .min(10, 'error.tooSmall')\n            .max(20, 'error.tooLarge')\n            .required('error.required'),\n    });\n\nexport const SIRForm = ({ onChange }) => {\n    const classes = useStyles();\n\n    const initialValues = {\n        S: '',\n    };\n\n    const name = 'S';\n    return (\n        <Formik\n            enableReinitialize\n            initialValues={initialValues}\n            onSubmit={(values, { setSubmitting }) => {\n                onChange({ s: values['S'], i: 2, r: 1 });\n            }}\n            validationSchema={validationSchema()}\n        >\n            {({ values, touched, errors, handleChange, handleBlur }) => (\n                <Form>\n                    <Grid\n                        className={classes.grid}\n                        container\n                        direction=\"row\"\n                        justify=\"flex-start\"\n                        alignItems=\"center\"\n                    >\n                        <FormControl className={classes.formControl}>\n                            <TextField\n                                className={classes.textField}\n                                name={name}\n                                label={'Parametre S'}\n                                value={values[name]}\n                                onChange={handleChange}\n                                onBlur={handleBlur}\n                                InputLabelProps={{\n                                    shrink: true,\n                                }}\n                                helperText={errors[name] && touched[name] && errors[name]}\n                                error={Boolean(errors[name] && touched[name])}\n                            ></TextField>\n                        </FormControl>\n                    </Grid>\n                    <Button\n                        className={classes.actions}\n                        variant=\"contained\"\n                        color=\"primary\"\n                        type=\"submit\"\n                    >\n                        Calculer\n                    </Button>\n                </Form>\n            )}\n        </Formik>\n    );\n};\n","import React from 'react';\nimport { SIRForm } from './SIRForm';\nimport { Grid } from '@material-ui/core';\nimport { createStyles, makeStyles } from '@material-ui/core/styles';\nimport { simpleSir, dummyModel } from './model/sir';\n\nconst useStyles = makeStyles((theme) =>\n    createStyles({\n        root: {\n            flexGrow: 1,\n        },\n    }),\n);\nexport const SIRView = () => {\n    const classes = useStyles();\n    const [values, setValues] = React.useState();\n    // eslint-disable-next-line no-console\n    console.log({ values });\n    return (\n        <div className={classes.root}>\n            <Grid container direction=\"column\" justify=\"center\" alignItems=\"stretch\" spacing={3}>\n                <Grid item>\n                    <SIRForm onChange={(values) => setValues(values)} />\n                </Grid>\n                {values && <Grid item>Result = {simpleSir(values)}</Grid>}\n            </Grid>\n        </div>\n    );\n};\n","import React from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { dummyModel } from './model/sir';\n\nconst Chart = () => {\n    const initialState = {\n        lineData: {\n            labels: new Array(dummyModel().saints.length),\n            datasets: [\n                {\n                    label: ['Population saine'],\n                    data: dummyModel().saints,\n                },\n                {\n                    label: ['Population infectée'],\n                    data: dummyModel().infectes,\n                },\n                {\n                    label: ['Population rétablie'],\n                    data: dummyModel().retires,\n                },\n            ],\n        },\n    };\n    const [state, setState] = React.useState(initialState);\n\n    return (\n        <div className=\"Chart\">\n            <Line\n                data={state.lineData}\n                width=\"10\"\n                height=\"10\"\n                options={{\n                    title: {\n                        display: true,\n                        text: 'Un graphique',\n                        fontSize: 25,\n                    },\n                }}\n            />\n        </div>\n    );\n};\n\nexport default Chart;\n","import React from 'react';\nimport './App.css';\nimport { Typography, Box } from '@material-ui/core';\nimport { SIRView } from './SIRView';\nimport { dummyModel } from './model/sir';\nimport { Chart } from 'chart.js';\nimport ChartPage from './ChartView';\n\nconst App = () => {\n    return (\n        <div className=\"App\">\n            <Box m={8}>\n                <Typography variant=\"h3\" component=\"h2\">\n                    Projet MODCOV19 - prototype\n                </Typography>\n            </Box>\n            <Box m={8}>\n                <Typography variant=\"body1\" component=\"h2\">\n                    {/* Dummy result {dummyModel().saints} */}\n                </Typography>\n            </Box>\n            <Box m={8} h={30}>\n                <ChartPage />\n            </Box>\n        </div>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport MyApp from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <MyApp />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}